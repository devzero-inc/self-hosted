#!/usr/bin/env python3

import collections

import click

from dz_installer.dz_config import DZConfig
from dz_installer.helpers import get_provider
from dz_installer.control_plane import ControlPlane
from dz_installer.providers.aws import AWSProvider

# Version constant
VERSION = "1.0.0"

class OrderedGroup(click.Group):
    def __init__(self, name=None, commands=None, **attrs):
        super(OrderedGroup, self).__init__(name, commands, **attrs)
        #: the registered subcommands by their exported names.
        self.commands = commands or collections.OrderedDict()

    def list_commands(self, ctx):
        return self.commands


@click.group()
@click.version_option(VERSION)
def cli():
    """DevZero Kubernetes Cluster Installation Tool"""
    pass


# Global configuration commands
@cli.group()
def global_config():
    """Defines global configuration for various commands"""
    pass


@global_config.command("cloud-provider")
@click.argument(
    "provider", type=click.Choice(["aws", "gcp", "azure"], case_sensitive=False)
)
def set_cloud_provider(provider):
    """Set the cloud provider for DevZero installation"""
    click.echo(f"Setting cloud provider to: {provider}")
    cfg = DZConfig()
    cfg.globals.provider = provider
    cfg.save()


# Check commands
@cli.group(name="check")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check(force):
    """Checks for various required resources"""
    pass

@check.command("all")
def check_all():
    """Runs all checks"""
    click.echo("Running all checks...")

# Control plane commands
@check.group("control-plane", cls=OrderedGroup)
def check_control_plane():
    """Runs control plane checks for the current cloud provider"""
    pass


@check_control_plane.command("all")
def check_control_plane_all():
    """Runs all control-plane checks"""
    click.echo("Running all control plane checks...")


@check_control_plane.command("permissions")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_permissions(force):
    """Runs permission checks for the current cloud provider"""
    get_provider().check_control_plane_permissions(force)


@check_control_plane.command("cluster")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_cluster(force):
    """Runs cluster existence checks for the current cloud provider"""
    # Temporary casting
    provider: AWSProvider = get_provider()
    provider.control_plane_cluster(force)


@check_control_plane.command("network")
def check_control_plane_network():
    """Runs network checks for the current cloud provider"""
    click.echo("Checking control plane network...")


@check_control_plane.command("ingress")
def check_control_plane_ingress():
    """Runs cluster existence checks kubernetes ingresses"""
    click.echo("Checking control plane ingress...")


# Control plane Helm chart checks
@check_control_plane.command("chart")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_chart(force):
    """Helm chart: control-plane"""
    click.echo("Checking helm chart: control-plane")
    ControlPlane().control_plane_chart(force)

@check_control_plane.command("cert-issuer")
def check_control_plane_cert_issuer():
    """Helm chart: cert-issuer"""
    click.echo("Checking helm chart: cert-issuer")

# Data plane commands
@check.group("data-plane", cls=OrderedGroup)
def check_data_plane():
    """Runs data plane checks for the current cloud provider"""
    pass


@check_data_plane.command("all")
def check_data_plane_all():
    """Runs all data-plane checks"""
    click.echo("Running all data plane checks...")


@check_data_plane.command("permissions")
def check_data_plane_permissions():
    """Runs permission checks for the current cloud provider"""
    click.echo("Checking data plane permissions...")


@check_data_plane.command("network")
def check_data_plane_network():
    """Runs network checks for the current cloud provider"""
    click.echo("Checking data plane network...")


@check_data_plane.command("cluster")
def check_data_plane_cluster():
    """Runs cluster existence checks for the current cloud provider"""
    click.echo("Checking data plane cluster...")


@check_data_plane.command("ingress")
def check_data_plane_ingress():
    """Runs cluster existence checks kubernetes ingresses"""
    click.echo("Checking data plane ingress...")


# Data plane Helm chart checks
@check_data_plane.command("rook-ceph")
def check_data_plane_rook_ceph():
    """Helm chart: rook-ceph"""
    click.echo("Checking helm chart: rook-ceph")


@check_data_plane.command("rook-ceph-cluster")
def check_data_plane_rook_ceph_cluster():
    """Helm chart: rook-ceph-cluster"""
    click.echo("Checking helm chart: rook-ceph-cluster")


@check_data_plane.command("ingress-nginx")
def check_data_plane_ingress_nginx():
    """Helm chart: ingress-nginx"""
    click.echo("Checking helm chart: ingress-nginx")


@check_data_plane.command("cert-manager")
def check_data_plane_cert_manager():
    """Helm chart: cert-manager"""
    click.echo("Checking helm chart: cert-manager")


@check_data_plane.command("cedana")
def check_data_plane_cedana():
    """Helm chart: cedana"""
    click.echo("Checking helm chart: cedana")


@check_data_plane.command("metacontroller")
def check_data_plane_metacontroller():
    """Helm chart: metacontroller"""
    click.echo("Checking helm chart: metacontroller")


@check_data_plane.command("prometheus")
def check_data_plane_prometheus():
    """Helm chart: prometheus"""
    click.echo("Checking helm chart: prometheus")

@cli.group(name="install")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def install(force):
    """Installs various required resources"""
    pass


@install.command("all")
def install_all():
    """Runs all checks"""
    click.echo("Running all checks...")

# Control plane commands
@install.group("control-plane", cls=OrderedGroup)
def install_control_plane():
    """Runs control plane checks for the current cloud provider"""
    pass

@install_control_plane.command("all")
def install_control_plane_all():
    """Runs all control-plane checks"""
    click.echo("Running all control plane checks...")

# Control plane Helm chart checks
@install_control_plane.command("chart")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def install_control_plane_chart(force):
    """Helm chart: control-plane"""
    click.echo("Checking helm chart: control-plane")
    ControlPlane().install_control_plane_chart(force)

if __name__ == "__main__":
    cli()
