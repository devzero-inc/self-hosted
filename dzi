#!/usr/bin/env python3

import collections

import click

from dz_installer.data_plane import DataPlane
from dz_installer.dz_config import DZConfig
from dz_installer.helpers import get_provider, info
from dz_installer.control_plane import ControlPlane
from dz_installer.providers.aws import AWSProvider

# Version constant
VERSION = "1.0.0"

class OrderedGroup(click.Group):
    def __init__(self, name=None, commands=None, **attrs):
        super(OrderedGroup, self).__init__(name, commands, **attrs)
        #: the registered subcommands by their exported names.
        self.commands = commands or collections.OrderedDict()

    def list_commands(self, ctx):
        return self.commands

@click.group()
@click.version_option(VERSION)
def cli():
    """DevZero Kubernetes Cluster Installation Tool"""
    pass

# Global configuration commands
@cli.group()
def global_config():
    """Defines global configuration for various commands"""
    pass

@global_config.command("cloud-provider")
@click.argument(
    "provider", type=click.Choice(["aws", "gcp", "azure"], case_sensitive=False)
)
def set_cloud_provider(provider):
    """Set the cloud provider for DevZero installation"""
    click.echo(f"Setting cloud provider to: {provider}")
    cfg = DZConfig().data
    cfg.globals.provider = provider
    cfg.save()

# Check commands
@cli.group(name="check")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check(force):
    """Checks for various required resources"""
    pass

@check.command("all")
def check_all():
    """Runs all checks"""
    info("Running all checks...")
    check_control_plane_all()
    check_data_plane_all()

# Control plane commands
@check.group("control-plane", cls=OrderedGroup)
def check_control_plane():
    """Runs control plane checks for the current cloud provider"""
    pass

@check_control_plane.command("all")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_all(force):
    """Runs all control-plane checks"""
    info("Running all control plane checks...")
    provider: AWSProvider = get_provider()
    provider.control_plane_cluster(force)
    provider.control_plane_network(force)
    cp = ControlPlane()
    cp.check_control_plane_ingress(force)
    cp.check_control_plane_cert_manager(force)
    cp.check_control_plane_chart(force)

@check_control_plane.command("permissions")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_permissions(force):
    """Runs permission checks for the current cloud provider"""
    provider: AWSProvider = get_provider()
    provider.control_plane_permissions(force)

@check_control_plane.command("cluster")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_cluster(force):
    """Runs cluster existence checks for the current cloud provider"""
    # Temporary casting
    provider: AWSProvider = get_provider()
    provider.control_plane_cluster(force)

@check_control_plane.command("network")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_network(force):
    """Runs network checks for the current cloud provider"""
    provider: AWSProvider = get_provider()
    provider.control_plane_network(force)

@check_control_plane.command("ingress")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_ingress(force):
    """Runs cluster existence checks kubernetes ingresses"""
    ControlPlane().check_control_plane_ingress(force)

# Control plane Helm chart checks
@check_control_plane.command("chart")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_chart(force):
    """Helm chart: control-plane"""
    ControlPlane().check_control_plane_chart(force)

@check_control_plane.command("certificates")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_control_plane_cert_issuer(force):
    """Helm chart: cert-issuer"""
    ControlPlane().check_control_plane_cert_manager(force)

# Data plane commands
@check.group("data-plane", cls=OrderedGroup)
def check_data_plane():
    """Runs data plane checks for the current cloud provider"""
    pass

@check_data_plane.command("all")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_data_plane_all(force):
    """Runs all data-plane checks"""
    info("Running all data plane checks...")
    provider: AWSProvider = get_provider()
    provider.data_plane_cluster(force)
    provider.data_plane_network(force)
    dp = DataPlane()
    dp.check_data_plane_ingress(force)
    dp.check_data_plane_rook_ceph(force)
    dp.check_data_plane_chart(force)

@check_data_plane.command("permissions")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_data_plane_permissions(force):
    """Runs permission checks for the current cloud provider"""
    info("Checking data plane permissions...")
    provider: AWSProvider = get_provider()
    provider.data_plane_permissions(force)

@check_data_plane.command("network")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_data_plane_network(force):
    """Runs network checks for the current cloud provider"""
    info("Checking data plane network...")
    provider: AWSProvider = get_provider()
    provider.data_plane_network(force)

@check_data_plane.command("cluster")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_data_plane_cluster(force):
    """Runs cluster existence checks for the current cloud provider"""
    info("Checking data plane cluster...")
    provider: AWSProvider = get_provider()
    provider.data_plane_cluster(force)

@check_data_plane.command("ingress")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_data_plane_ingress(force):
    """Runs cluster existence checks kubernetes ingresses"""
    info("Checking data plane ingress...")
    DataPlane().check_data_plane_ingress(force)

# Data plane Helm chart checks
@check_data_plane.command("rook-ceph")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_data_plane_rook_ceph(force):
    """Helm chart: rook-ceph"""
    DataPlane().check_data_plane_rook_ceph(force)

@check_data_plane.command("ingress-nginx")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def check_data_plane_ingress_nginx(force):
    """Helm chart: ingress-nginx"""
    DataPlane().check_data_plane_ingress(force)

@cli.group(name="install")
@click.option(
    "--force", is_flag=True, help="Force run checks even if already checked before"
)
def install(force):
    """Installs various required resources"""
    pass

@install.command("all")
def install_all():
    """Runs all checks"""
    info("Running all checks...")
    install_control_plane_all()
    install_data_plane_all()

# Control plane commands
@install.group("control-plane", cls=OrderedGroup)
def install_control_plane():
    """Runs control plane checks for the current cloud provider"""
    pass

@install_control_plane.command("all")
def install_control_plane_all():
    """Runs all control-plane checks"""
    info("Installing control plane...")
    cp = ControlPlane()
    cp.install_control_plane_ingress()
    cp.install_control_plane_cert_manager()
    cp.install_control_plane_deps()
    cp.install_control_plane_chart()

@install_control_plane.command("ingress")
def install_control_plane_ingress():
    """Runs cluster existence checks kubernetes ingresses"""
    ControlPlane().install_control_plane_ingress()

@install_control_plane.command("certificate")
def install_control_plane_certificate():
    """Runs cluster existence checks kubernetes ingresses"""
    ControlPlane().install_control_plane_cert_manager()

@install_control_plane.command("deps")
def install_control_plane_deps():
    """Helm chart: control-plane"""
    ControlPlane().install_control_plane_deps()

@install_control_plane.command("chart")
def install_control_plane_chart():
    """Helm chart: control-plane"""
    ControlPlane().install_control_plane_chart()

@install.group("data-plane", cls=OrderedGroup)
def install_data_plane():
    """Runs data plane checks for the current cloud provider"""
    pass

@install_data_plane.command("all")
def install_data_plane_all():
    """Runs all data-plane checks"""
    info("Installing data plane...")
    dp = DataPlane()
    dp.install_data_plane_ingress()
    dp.install_data_plane_rook_ceph()
    dp.install_data_plane_deps()
    dp.install_data_plane_chart()

@install_data_plane.command("ingress")
def install_data_plane_ingress():
    """Runs cluster existence checks kubernetes ingresses"""
    DataPlane().install_data_plane_ingress()

@install_data_plane.command("rook-ceph")
def install_data_plane_rook_ceph():
    """Helm chart: rook-ceph"""
    DataPlane().install_data_plane_rook_ceph()

@install_data_plane.command("deps")
def install_data_plane_deps():
    """Helm chart: rook-ceph"""
    DataPlane().install_data_plane_deps()

@install_data_plane.command("chart")
def install_data_plane_chart():
    """Helm chart: rook-ceph"""
    DataPlane().install_data_plane_chart()

if __name__ == "__main__":
    cli()
