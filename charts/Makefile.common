KUBECTL_BIN = $(shell which kubectl)
HELM_BIN = $(shell which helm)

# Install strategy: helm or kubectl
INSTALL_STRATEGY = helm

################################################################################
# Generic targets for strategies and independent targets
################################################################################
.PHONY: _install-local-helm-chart
_install-local-helm-chart-default:
	@if [ "$(INSTALL_STRATEGY)" = "helm" ]; then \
		$(MAKE) _install-local-helm-chart-default-helm; \
	elif [ "$(INSTALL_STRATEGY)" = "kubectl" ]; then \
		$(MAKE) _install-local-helm-chart-default-kubectl; \
	fi

.PHONY: _install-helm-chart-default
_install-helm-chart-default:
	@if [ "$(INSTALL_STRATEGY)" = "helm" ]; then \
		$(MAKE) _install-helm-chart-default-helm; \
	elif [ "$(INSTALL_STRATEGY)" = "kubectl" ]; then \
		$(MAKE) _install-helm-chart-default-kubectl; \
	fi

	

.PHONY: _install-helm-chart
_install-helm-chart:
	@if [ "$(INSTALL_STRATEGY)" = "helm" ]; then \
		$(MAKE) _install-helm-chart-helm; \
	elif [ "$(INSTALL_STRATEGY)" = "kubectl" ]; then \
		$(MAKE) _install-helm-chart-kubectl; \
	fi

.PHONY: _install-oci-helm-chart
_install-oci-helm-chart:
	@if [ "$(INSTALL_STRATEGY)" = "helm" ]; then \
		$(MAKE) _install-oci-helm-chart-helm; \
	elif [ "$(INSTALL_STRATEGY)" = "kubectl" ]; then \
		$(MAKE) _install-oci-helm-chart-kubectl; \
	fi

.PHONY: _delete-chart
_delete-chart:
	@if [ "$(INSTALL_STRATEGY)" = "helm" ]; then \
		$(MAKE) _delete-chart-helm; \
	elif [ "$(INSTALL_STRATEGY)" = "kubectl" ]; then \
		$(MAKE) _delete-chart-kubectl; \
	fi

.PHONY: _delete-local-chart
_delete-local-chart:
	@if [ "$(INSTALL_STRATEGY)" = "helm" ]; then \
		$(MAKE) _delete-local-chart-helm; \
	elif [ "$(INSTALL_STRATEGY)" = "kubectl" ]; then \
		$(MAKE) _delete-local-chart-kubectl; \
	fi

.PHONY: _create-namespace
_create-namespace:
	$(KUBECTL_BIN) get namespace $(NAMESPACE) || $(KUBECTL_BIN) create namespace $(NAMESPACE)

.PHONY: _delete-namespace
_delete-namespace:
	@echo "Deleting namespace $(NAMESPACE)..."

	-@timeout 60s bash -c '\
		$(KUBECTL_BIN) delete namespace $(NAMESPACE) --ignore-not-found=true; \
		echo "Waiting for namespace $(NAMESPACE) to terminate..."; \
		for i in {1..30}; do \
			if ! kubectl get namespace $(NAMESPACE) >/dev/null 2>&1; then \
				echo "Namespace $(NAMESPACE) deleted successfully."; \
				exit 0; \
			fi; \
			sleep 2; \
		done; \
		echo "Timeout waiting for namespace $(NAMESPACE) to terminate. Proceeding anyway."; \
		exit 0'

	@echo "Done deleting namespace $(NAMESPACE)"

.PHONY: _delete-crds
_delete-crds:
	$(KUBECTL_BIN) get crds -o name | grep '$(CRD_NAME)' | xargs -r -n1 timeout 30s $(KUBECTL_BIN) delete --ignore-not-found=true || true


################################################################################
# Helm Strategy
################################################################################
.PHONY: _install-local-helm-chart-helm
_install-local-helm-chart-default-helm:
	$(HELM_BIN) upgrade --install $(APP_NAME) . \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--values $(VALUES)

.PHONY: _install-helm-chart-default-helm
_install-helm-chart-default-helm:
	@$(HELM_BIN) repo add $(REPO_NAME) $(REPO_URL)
	@$(HELM_BIN) repo update $(REPO_NAME)
	$(HELM_BIN) upgrade --install $(APP_NAME) $(REPO_NAME)/$(REPO_APP_NAME) --version $(VERSION) \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--wait

.PHONY: _install-helm-chart-helm
_install-helm-chart-helm:
	@$(HELM_BIN) repo add $(REPO_NAME) $(REPO_URL)
	@$(HELM_BIN) repo update $(REPO_NAME)
	$(HELM_BIN) upgrade --install $(APP_NAME) $(REPO_NAME)/$(REPO_APP_NAME) --version $(VERSION) \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--values values/$(APP_NAME).yaml \
		--values values/$(APP_NAME)_overrides.yaml $(EXTRA_ARGS)

.PHONY: _install-oci-helm-chart-helm
_install-oci-helm-chart-helm:
	HELM_EXPERIMENTAL_OCI=1 $(HELM_BIN) upgrade --install $(APP_NAME) $(REPO_URL)/$(REPO_NAME) --version $(VERSION) \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--values values/$(APP_NAME).yaml \
		--values values/$(APP_NAME)_overrides.yaml

.PHONY: _delete-chart-helm
_delete-chart-helm:
	$(HELM_BIN) delete $(APP_NAME) -n $(NAMESPACE) --ignore-not-found

.PHONY: _delete-local-chart-helm
_delete-local-chart-helm:
	$(HELM_BIN) delete $(APP_NAME) -n $(NAMESPACE) --ignore-not-found



################################################################################
# Kubectl Strategy
################################################################################
.PHONY: _install-local-helm-chart-kubectl
_install-local-helm-chart-default-kubectl:
	@CURR_NS=$($(KUBECTL_BIN) config view --minify --output 'jsonpath={.contexts[0].context.namespace}')
	@$(KUBECTL_BIN) config set-context --current --namespace=$(NAMESPACE)

	@$(KUBECTL_BIN) get namespace $(NAMESPACE) || $(KUBECTL_BIN) create namespace $(NAMESPACE)
	$(HELM_BIN) template $(APP_NAME) . \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--values $(VALUES) \
		| $(KUBECTL_BIN) apply --force-conflicts --server-side -f -

	@$(KUBECTL_BIN) config set-context --current --namespace=$(CURR_NS)

.PHONY: _install-helm-chart-default-kubectl
_install-helm-chart-default-kubectl:
	@CURR_NS=$($(KUBECTL_BIN) config view --minify --output 'jsonpath={.contexts[0].context.namespace}')
	@$(KUBECTL_BIN) config set-context --current --namespace=$(NAMESPACE)

	@$(KUBECTL_BIN) get namespace $(NAMESPACE) || $(KUBECTL_BIN) create namespace $(NAMESPACE)
	@$(HELM_BIN) repo add $(REPO_NAME) $(REPO_URL)
	@$(HELM_BIN) repo update $(REPO_NAME)
	$(HELM_BIN) template $(APP_NAME) $(REPO_NAME)/$(REPO_APP_NAME) --version $(VERSION) \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--wait \
		| $(KUBECTL_BIN) apply --force-conflicts --server-side -f -

	@$(KUBECTL_BIN) config set-context --current --namespace=$(CURR_NS)

.PHONY: _install-helm-chart-kubectl
_install-helm-chart-kubectl:
	@CURR_NS=$($(KUBECTL_BIN) config view --minify --output 'jsonpath={.contexts[0].context.namespace}')
	@$(KUBECTL_BIN) config set-context --current --namespace=$(NAMESPACE)

	@$(KUBECTL_BIN) get namespace $(NAMESPACE) || $(KUBECTL_BIN) create namespace $(NAMESPACE)
	@$(HELM_BIN) repo add $(REPO_NAME) $(REPO_URL)
	@$(HELM_BIN) repo update $(REPO_NAME)
	$(HELM_BIN) template $(APP_NAME) $(REPO_NAME)/$(REPO_APP_NAME) --version $(VERSION) \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--values values/$(APP_NAME).yaml \
		--values values/$(APP_NAME)_overrides.yaml \
		| $(KUBECTL_BIN) apply --force-conflicts --server-side -f -

	@$(KUBECTL_BIN) config set-context --current --namespace=$(CURR_NS)

.PHONY: _install-oci-helm-chart-kubectl
_install-oci-helm-chart-kubectl:
	@CURR_NS=$($(KUBECTL_BIN) config view --minify --output 'jsonpath={.contexts[0].context.namespace}')
	@$(KUBECTL_BIN) config set-context --current --namespace=$(NAMESPACE)

	@$(KUBECTL_BIN) get namespace $(NAMESPACE) || $(KUBECTL_BIN) create namespace $(NAMESPACE)
	HELM_EXPERIMENTAL_OCI=1 $(HELM_BIN) template $(APP_NAME) $(REPO_URL)/$(REPO_NAME) --version $(VERSION) \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--values values/$(APP_NAME).yaml \
		--values values/$(APP_NAME)_overrides.yaml \
		| $(KUBECTL_BIN) apply --force-conflicts --server-side -f -

	@$(KUBECTL_BIN) config set-context --current --namespace=$(CURR_NS)

.PHONY: _delete-chart-kubectl
_delete-chart-kubectl:
	@CURR_NS=$($(KUBECTL_BIN) config view --minify --output 'jsonpath={.contexts[0].context.namespace}')
	@$(KUBECTL_BIN) config set-context --current --namespace=$(NAMESPACE)

	@$(HELM_BIN) repo add $(REPO_NAME) $(REPO_URL)
	@$(HELM_BIN) repo update $(REPO_NAME)
	$(HELM_BIN) template $(APP_NAME) $(REPO_NAME)/$(REPO_APP_NAME) --version $(VERSION) \
		--namespace $(NAMESPACE) \
		--values values/$(APP_NAME).yaml \
		--values values/$(APP_NAME)_overrides.yaml | $(KUBECTL_BIN) delete --ignore-not-found=true -f -

	@$(KUBECTL_BIN) config set-context --current --namespace=$(CURR_NS)

.PHONY: _delete-local-chart-kubectl
_delete-local-chart-kubectl:
	@CURR_NS=$($(KUBECTL_BIN) config view --minify --output 'jsonpath={.contexts[0].context.namespace}')
	@$(KUBECTL_BIN) config set-context --current --namespace=$(NAMESPACE)

	$(HELM_BIN) template $(APP_NAME) . \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--values $(VALUES) \
		| $(KUBECTL_BIN) delete --ignore-not-found=true -f -

	$(KUBECTL_BIN) config set-context --current --namespace=$(CURR_NS)

