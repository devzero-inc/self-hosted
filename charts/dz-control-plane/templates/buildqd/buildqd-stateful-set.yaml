apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "devzero.resourceName" (dict "ctx" . "component" "buildqd") }}
  labels:
    {{- include "devzero.labels" (dict "ctx" . "component" "buildqd") | nindent 4 }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  serviceName: "buildqd"
  replicas: {{ .Values.buildqd.replicas }}
  selector:
    matchLabels:
      {{- include "devzero.selectorLabels" (dict "ctx" . "component" "buildqd") | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "devzero.selectorLabels" (dict "ctx" . "component" "buildqd") | nindent 8 }}
      annotations:
        {{- include "devzero.podAnnotations" (dict "ctx" . "component" "buildqd") | nindent 8 }}
    spec:
      {{- if and (hasKey .Values.buildqd "caCertificates") (hasKey .Values.buildqd.caCertificates "certificates") .Values.buildqd.caCertificates.certificates }}
      # Add init container to update CA certificates
      initContainers:
        - name: update-ca-certificates
          image: ubuntu:22.04
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "Starting CA certificate setup..."
              
              # Check which package manager is available
              if command -v apt-get &> /dev/null; then
                echo "Using apt-get to install packages"
                apt-get update && apt-get install -y ca-certificates
              elif command -v apk &> /dev/null; then
                echo "Using apk to install packages"
                apk add --no-cache ca-certificates
              else
                echo "No supported package manager found"
                exit 1
              fi
              
              echo "Creating required directories..."
              mkdir -p /usr/local/share/ca-certificates
              mkdir -p /etc/ssl/certs
              mkdir -p /shared-certs
              
              echo "Listing CA files to be copied:"
              ls -la /ca-certs/
              
              echo "Copying certificates to ca-certificates directory..."
              cp /ca-certs/* /usr/local/share/ca-certificates/ || echo "Warning: Copy to ca-certificates failed"
              
              echo "Updating CA certificates..."
              update-ca-certificates || echo "Warning: update-ca-certificates failed"
              
              echo "Contents of /etc/ssl/certs/:"
              ls -la /etc/ssl/certs/ || echo "Warning: /etc/ssl/certs/ doesn't exist or is empty"
              
              echo "Copying certs to shared volume..."
              cp -r /etc/ssl/certs/* /shared-certs/ || echo "Warning: Copy to shared-certs failed"
              
              echo "Contents of shared-certs:"
              ls -la /shared-certs/
              
              echo "CA certificate setup completed"
          volumeMounts:
            - name: ca-certs-volume
              mountPath: /ca-certs
            - name: shared-certs
              mountPath: /shared-certs
      {{- end }}
      containers:
        - name: buildqd
          image: "{{ .Values.image.repository }}/{{ .Values.buildqd.imageName }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.buildqd.service.port }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.buildqd.service.metricsPort }}
              protocol: TCP
          resources:
            {{- toYaml .Values.buildqd.resources | nindent 12 }}
          volumeMounts:
            - name: buildqd-config
              mountPath: /config/self_hosted.yaml
              subPath: self_hosted.yaml
            - name: buildkit-state
              mountPath: /var/lib/buildkit
            {{- if and (hasKey .Values.buildqd "caCertificates") (hasKey .Values.buildqd.caCertificates "certificates") .Values.buildqd.caCertificates.certificates }}
            - name: shared-certs
              mountPath: /etc/ssl/certs
              readOnly: true
            {{- end }}
          env:
            - name: CONFIG_FILENAME
              value: "self_hosted"
        - name: buildkitd
          securityContext:
            {{- toYaml .Values.buildqd.buildkit.securityContext | nindent 12 }}
          image: "{{ .Values.buildqd.buildkit.image.repository }}:{{ .Values.buildqd.buildkit.image.tag }}"
          imagePullPolicy: {{ .Values.buildqd.buildkit.image.pullPolicy }}
          command:
            - {{ .Values.buildqd.buildkit.command }}
          {{- with .Values.buildqd.buildkit.args }}
          args:
            {{- toYaml . | nindent 10 }}
          {{- end }}
          ports:
            - name: buildkit
              containerPort: 1234
              protocol: TCP
          volumeMounts:
            - name: buildkit-config
              mountPath: /etc/buildkit/buildkitd.toml
              subPath: buildkitd.toml
            - name: buildkit-state
              mountPath: /var/lib/buildkit
            {{- if and (hasKey .Values.buildqd "caCertificates") (hasKey .Values.buildqd.caCertificates "certificates") .Values.buildqd.caCertificates.certificates }}
            - name: shared-certs
              mountPath: /etc/ssl/certs
              readOnly: true
            {{- end }}
          resources:
            {{- toYaml .Values.buildqd.buildkit.resources | nindent 12 }}
      volumes:
        - name: buildqd-config
          configMap:
            name: {{ include "devzero.resourceName" (dict "ctx" . "component" "buildqd") }}
        - name: buildkit-config
          configMap:
            name: {{ include "devzero.resourceName" (dict "ctx" . "component" "buildqd") }}-buildkit
        {{- if and (hasKey .Values.buildqd "caCertificates") (hasKey .Values.buildqd.caCertificates "certificates") .Values.buildqd.caCertificates.certificates }}
        - name: ca-certs-volume
          secret:
            secretName: {{ include "devzero.resourceName" (dict "ctx" . "component" "buildqd") }}-ca-certs
        - name: shared-certs
          emptyDir: {}
        {{- end }}
      {{- with .Values.buildqd.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.buildqd.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.buildqd.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: buildkit-state
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.buildqd.buildkit.persistentVolumeClaim.storageSize }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Retain
