---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pulse-secret-sa
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-6"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pulse-secret-role
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pulse-secret-rolebinding
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pulse-secret-role
subjects:
  - kind: ServiceAccount
    name: pulse-secret-sa
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "devzero.resourceName" (dict "ctx" . "component" "pulse") }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "devzero.labels" (dict "ctx" . "component" "pulse") | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        {{- include "devzero.podLabels" (dict "ctx" . "component" "pulse") | nindent 8 }}
    spec:
      serviceAccountName: pulse-secret-sa
      restartPolicy: OnFailure
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      containers:
        - name: pulse-secret-generate
          image: bitnami/kubectl:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Checking if Dev Lake secret exists..."

              # Check if the secret exists
              if kubectl get secret devlake-secret -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Secret already exists. Skipping creation."
                exit 0
              fi

              echo "Creating new Kubernetes secret..."

              # Generate a random token according to your rules
              RANDOM_TOKEN=$(openssl rand -base64 2000 | tr -dc 'A-Z' | fold -w 128 | head -n 1)

              # Create the secret with the generated token
              kubectl create secret generic devlake-secret \
                --from-literal="token=$RANDOM_TOKEN"

              echo "Dev Lake secret created successfully."
