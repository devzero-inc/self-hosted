{{- if .Values.vault.job.enabled | default false -}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-job-sa
  namespace: {{ .Release.Namespace | quote }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-job-role
  namespace: {{ .Release.Namespace | quote }}
rules:
  - apiGroups: [""]
    resources: ["pods", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-job-rolebinding
  namespace: {{ .Release.Namespace | quote }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-job-role
subjects:
  - kind: ServiceAccount
    name: vault-job-sa
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "devzero.resourceName" (dict "ctx" . "component" "vault") }}-init-script
  namespace: {{ .Release.Namespace | quote }}
data:
  init.sh: |
    #!/bin/bash

    echo "Installing resources..."
    apt-get update && apt-get install -y curl unzip jq > /dev/null
    # Download and install Vault binary
    curl -LO https://releases.hashicorp.com/vault/1.17.2/vault_1.17.2_linux_amd64.zip > /dev/null
    unzip vault_1.17.2_linux_amd64.zip > /dev/null
    mv vault /usr/local/bin/
    rm vault_1.17.2_linux_amd64.zip

    echo "Resources installed successfully."

    # Verify installation
    echo "Vault version: $(vault version)"


    # Get the first endpoint defined in the Vault service, so we send all requests to the same pod
    VAULT_POD_IP=$(kubectl get endpoints vault -o jsonpath='{.subsets[0].addresses[0].ip}:{.subsets[0].ports[?(@.port==8200)].port}')

    # Set Vault address
    export VAULT_ADDR="http://$VAULT_POD_IP"
    echo "VAULT_ADDR: $VAULT_ADDR"

    VAULT_SECRET_KEYS_NAME="vault-unseal-keys"

    # Check if Vault is initialized
    initialized=$(vault status -format=json | jq -r '.initialized')
    echo "Initialized: $initialized"
    
    if [ "$initialized" = "false" ]; then
      echo "Vault is not initialized. Initializing now..."

      # Check if seal type is awskms
      seal_type=$(vault status -format=json | jq -r '.type')
      echo "Seal type: $seal_type"

      if [ "$seal_type" = "awskms" ]; then
        echo "Vault is using AWS KMS for auto-unsealing"
        vault operator init -format=json  > init_output.json
      else
        # Initialize Vault with 5 Shamir keys and 3 required to unseal
        vault operator init -key-shares=5 -key-threshold=3 -format=json > init_output.json
      fi

      echo "Successfully extracted unseal keys and root token"

      # Extract the root_token from init_output.json
      root_token=$(jq -r '.root_token' init_output.json)

      # Delete existing secret if it exists
      if kubectl get secret "$VAULT_SECRET_KEYS_NAME" &>/dev/null; then
        echo "Deleting existing Kubernetes secret for new keys..."
        kubectl delete secret "$VAULT_SECRET_KEYS_NAME"
      fi

      echo "Creating new Kubernetes secret..."
      kubectl create secret generic "$VAULT_SECRET_KEYS_NAME" \
        --from-literal="data=$(cat init_output.json)" \
        --from-literal="root-token=$root_token"

      echo "Vault initialized and keys stored in Kubernetes secret."
    fi

    echo "Vault is already initialized."
    
    seal_type=$(vault status -format=json | jq -r '.type')
    echo "Seal type: $seal_type"
    if [ "$seal_type" = "awskms" ]; then
      echo "Vault is using AWS KMS for auto-unsealing. Skipping unsealing."
      exit 0
    fi

    # Get all the IP addresses for the "vault" service endpoints
    endpoints=$(kubectl get endpoints vault -o jsonpath='{.subsets[*].addresses[*].ip}')

    echo "Vault endpoints: $endpoints"

    # Retrieve keys from Kubernetes secret
    unseal_keys=$(kubectl get secret "$VAULT_SECRET_KEYS_NAME" -o jsonpath='{.data.data}' | base64 --decode | jq -r '.unseal_keys_b64[]')

    # Loop through each IP and echo it
    for ip in $endpoints; do
      ip="$ip:8200"

      # Set Vault address
      export VAULT_ADDR="http://$ip"
      echo "VAULT_ADDR: $VAULT_ADDR"

      # Check if Vault is sealed
      if vault status | grep -q 'Sealed.*true'; then
        echo "Vault is sealed on $ip. Unsealing now..."

        # Read keys line by line and unseal until successful
        for key in $unseal_keys; do
          vault operator unseal "$key" | grep 'Unseal Progress'

          # Check if vault is still sealed
          if ! vault status | grep -q 'Sealed.*true'; then
            echo "Vault successfully unsealed!"
            break
          fi
        done
      else
        echo "Vault is already unsealed."
      fi
    done
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "devzero.resourceName" (dict "ctx" . "component" "vault") }}-unseal
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "devzero.labels" (dict "ctx" . "component" "vault") | nindent 4 }}
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        {{- include "devzero.podLabels" (dict "ctx" . "component" "vault") | nindent 8 }}
    spec:
      serviceAccountName: vault-job-sa
      restartPolicy: OnFailure
      securityContext:
        runAsUser: 0
      containers:
        - name: vault-unseal
          image: bitnami/kubectl:1.30.7
          command: ["/bin/bash"]
          args: ["/scripts/init.sh"]
          volumeMounts:
            - name: init-script
              mountPath: /scripts
      volumes:
        - name: init-script
          configMap:
            name: {{ include "devzero.resourceName" (dict "ctx" . "component" "vault") }}-init-script
            defaultMode: 0755
---
# This cronjob is likely unnecessary, but allows manually triggering the unseal job. It will only run automatically once a year.
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "devzero.resourceName" (dict "ctx" . "component" "vault") }}-manual-unseal
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "devzero.labels" (dict "ctx" . "component" "vault") | nindent 4 }}
spec:
  schedule: "0 0 1 1 *"  # Run at 00:00 on January 1
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            {{- include "devzero.podLabels" (dict "ctx" . "component" "vault") | nindent 12 }}
        spec:
          serviceAccountName: vault-job-sa
          restartPolicy: OnFailure
          securityContext:
            runAsUser: 0
          containers:
            - name: vault-unseal
              image: bitnami/kubectl:1.30.7
              command: ["/bin/bash"]
              args: ["/scripts/init.sh"]
              volumeMounts:
                - name: init-script
                  mountPath: /scripts
          volumes:
            - name: init-script
              configMap:
                name: {{ include "devzero.resourceName" (dict "ctx" . "component" "vault") }}-init-script
                defaultMode: 0755
{{- end }}
