---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-secret-sa
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: auth-secret-role
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: auth-secret-rolebinding
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: auth-secret-role
subjects:
  - kind: ServiceAccount
    name: auth-secret-sa
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "devzero.resourceName" (dict "ctx" . "component" "auth") }}
  labels:
    {{- include "devzero.labels" (dict "ctx" . "component" "auth") | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        {{- include "devzero.podLabels" (dict "ctx" . "component" "auth") | nindent 8 }}
    spec:
      serviceAccountName: auth-secret-sa
      restartPolicy: OnFailure
      containers:
        - name: auth-secret-generate
          image: bitnami/kubectl:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Checking if Auth secret exists..."

              # Check if the secret exists
              if kubectl get secret auth-secret -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                echo "Secret auth-secret already exists. Skipping creation."
                exit 0
              fi

              echo "Creating RSA key pair for JWT authentication..."
              mkdir -p /tmp/jwt

              # Generate the private key
              openssl genrsa -out /tmp/jwt/private.key --traditional 2048

              # Generate the public key
              openssl rsa -pubout -in /tmp/jwt/private.key -out /tmp/jwt/public.key

              echo "Creating Kubernetes secret auth-secret..."

              echo "Encoding keys to Base64..."
              base64 //tmp/jwt/private.key > /tmp/jwt/private.key.b64
              base64 /tmp/jwt/public.key > /tmp/jwt/public.key.b64

              # Create the secret
              kubectl create secret generic auth-secret \
                --from-file=private.key=/tmp/jwt/private.key.b64 \
                --from-file=public.key=/tmp/jwt/public.key.b64 \
                -n {{ .Release.Namespace }}

              echo "Auth secret created successfully."