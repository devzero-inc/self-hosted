# yaml-language-server: $schema=https://raw.githubusercontent.com/hashicorp/vault-helm/refs/tags/v0.28.1/values.schema.json

# https://github.com/hashicorp/vault-helm/tree/v0.28.1

global:
  enabled: true

injector:
  enabled: false
  metrics:
    enabled: true
ui:
  enabled: true

server:
  enabled: true
  auditStorage:
    enabled: true
  dataStorage:
    enabled: true

  # The following is an example of how to configure the Vault server to use Azure Key Vault for auto-unsealing.
  # Before using this configuration, you need to create a secret in the Kubernetes cluster that contains the Azure Key Vault credentials:
  # kubectl create secret generic vault-azure-creds --from-literal=AZURE_TENANT_ID=<TENANT_ID> --from-literal=AZURE_CLIENT_ID=<CLIENT_ID> --from-literal=AZURE_CLIENT_SECRET=<CLIENT_SECRET> -n devzero

  # extraSecretEnvironmentVars:
  #   - envName: AZURE_CLIENT_ID
  #     secretName: vault-azure-creds
  #     secretKey: AZURE_CLIENT_ID
  #   - envName: AZURE_CLIENT_SECRET
  #     secretName: vault-azure-creds
  #     secretKey: AZURE_CLIENT_SECRET
  #   - envName: AZURE_TENANT_ID
  #     secretName: vault-azure-creds
  #     secretKey: AZURE_TENANT_ID

  # Disable vault anti-affinity that requires one pod on each node. This allows vault to run on a single node cluster.
  affinity: ""

  # Configure the service account if using GCP KMS for auto-unsealing.
  # serviceAccount:
  #   create: true
  #   name: vault
  #   annotations:
  #     iam.gke.io/gcp-service-account: gcp-service-account

  # extraEnvironmentVars:
  #   GOOGLE_APPLICATION_CREDENTIALS: ""  # explicitly blank; use Workload Identity
    
  ha:
    enabled: true
    replicas: 3
    config: |
      disable_mlock = true
      ui = true

      listener "tcp" {
        tls_disable = 1
        address = "[::]:8200"
        cluster_address = "[::]:8201"
      }

      service_registration "kubernetes" {}

      storage "postgresql" {
        ha_enabled = true
        ha_table = "vault_ha_locks"

        connection_url = "postgres://vault:vault@devzero-db-postgresql-hl:5432/vault"
      }

      # This is used to configure the Vault server to use AWS KMS for auto-unsealing.
      # This configuration can be found as the output if the devzero's base_cluster module when 
      # create_vault_auto_unseal_key variable is set to true. 
      # seal "awskms" {
      #   kms_key_id = "KMS_KEY_ID" 
      #   region = "AWS_REGION"
      # }

      # This is used to configure the Vault server to use GCP KMS for auto-unsealing.
      # This configuration can be found as the output if the devzero's base_cluster module when 
      # create_vault_auto_unseal_key variable is set to true. 
      # seal "gcpckms" {
      #   project     = "PROJECT_ID"
      #   region      = "global"
      #   key_ring    = "GCP_KEY_RING"
      #   crypto_key  = "GCP_CRYPTO_KEY"
      # }
      
      # This is used to configure the Vault server to use Azure Key Vault for auto-unsealing.
      # seal "azurekeyvault" {
      #   tenant_id      = "<vault_tenant_id>"
      #   client_id      = "<vault_sp_client_id>"
      #   client_secret  = "<vault_sp_client_secret>"
      #   vault_name     = "<vault_keyvault_name>"
      #   key_name       = "<vault_key_name>"
      # }

  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-self-hosted"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    ingressClassName: "nginx"
    hosts:
    - host: "vault.example.com"
    tls:
    - secretName: devzero-vault-tls
      hosts:
      - vault.example.com
