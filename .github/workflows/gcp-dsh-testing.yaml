name: "[GCP] DevZero self-hosted deployment"
run-name: '[GCP] self-hosted test run'

on:
  push:
    branches:
      - garvit/gcp-tf
  # schedule:
  #   - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: true
          workload_identity_provider: 'projects/devzero-kubernetes-sandbox/locations/global/workloadIdentityPools/dz-ga-dsh-pool/providers/dz-ga-dsh-provider'
          service_account: 'dsh-testing-github-actions@devzero-kubernetes-sandbox.iam.gserviceaccount.com'

      - name: Set GCP Credentials for Terraform
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=${{ steps.auth.outputs.credentials_file_path }}" >> $GITHUB_ENV

      - name: Clone DevZero Self-Hosted Repository
        env:
          GH_PAT: ${{ secrets.GH_TOKEN }}
        run: |
          git clone https://$GH_PAT@github.com/devzero-inc/self-hosted.git --branch garvit/gcp-tf --depth 1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.15.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
      
      - name : Add SHORT_SHA Environment Variable
        id   : short-sha
        shell: bash      
        run  : echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
      
      - name : Generate unique job identifier
        id   : job-identifier
        shell: bash      
        run  : echo "JOB_IDENTIFIER=gh-gcp-ci-${{ github.event.inputs.base_image }}-${SHORT_SHA}" >> $GITHUB_ENV

      - name: Add Backend Override (Base Cluster)
        run: |
          cd self-hosted/terraform/examples/gcp/base-cluster
          cat <<EOF > backend_override.tf
          terraform {
            backend "gcs" {
              bucket  = "dsh-tf-state"
              prefix  = "${JOB_IDENTIFIER}/base-cluster/terraform.tfstate"
            }
          }
          EOF

      - name: Initialize and Apply Terraform (Base Cluster)
        run: |
          cd self-hosted/terraform/examples/gcp/base-cluster
          terraform init
          terraform apply -auto-approve -var="cluster_name=$JOB_IDENTIFIER"

      - name: Configure Kubernetes Access
        run: |
          gcloud container clusters get-credentials $JOB_IDENTIFIER --zone us-central1-a --project devzero-kubernetes-sandbox

      - name: Set up Kata
        run: |
          cd self-hosted/terraform/examples/gcp/base-cluster
          kubectl apply -f kata-sa.yaml
          kubectl apply -f daemonset.yaml
          NODE_NAME=$(kubectl get nodes -o jsonpath='{.items[0].metadata.name}')
          kubectl label node $NODE_NAME kata-runtime=running --overwrite
          kubectl label node $NODE_NAME node-role.kubernetes.io/kata-devpod-node=1 --overwrite


      - name: Deploy Control Plane Dependencies (and modify domains)
        run: |
          cd self-hosted/charts/dz-control-plane-deps
          find values -type f -exec sed -i'.bak' "s/example\.com/$JOB_IDENTIFIER\.ci\.selfzero\.net/g" {} \; && find values -name "*.bak" -delete
          make install

      - name: Update values.yaml for dz-control-plane
        env:
          BACKEND_LICENSE_KEY: ${{ secrets.BACKEND_LICENSE_KEY }}
        run: |
          # setting credentials enable to false since we will explicitly feed the dockerhub creds to kubernetes api
          # also setting image.pullsecrets to empty to make sure that each of the deployments dont try to pull their relevant OCI images from this registry
          # backend license key is ... needed

          yq e '.credentials.enable = false | .backend.licenseKey = strenv(BACKEND_LICENSE_KEY) | .image.pullSecrets = []' -i self-hosted/charts/dz-control-plane/values.yaml

      - name: Deploy DevZero Control Plane (after configuring kubernetes to use dockerhub creds, and patching all the deployments to point to the right domain)
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          cd self-hosted/charts/dz-control-plane
          make add-docker-creds
          find . -name "values.yaml" -exec sed -i'.bak' "s/example\.com/$JOB_IDENTIFIER\.ci\.selfzero\.net/g" {} \; && find . -name "values.yaml.bak" -delete
          make install

      - name: Validate Control Plane
        run: |
          echo -e "\nPods in namespace  devzero:"
          kubectl get pods -n devzero
          chmod +x self-hosted/.github/scripts/dsh-pod-test.sh
          self-hosted/.github/scripts/dsh-pod-test.sh
          echo -e "\nIngress in namespace  devzero:"
          kubectl get ingress -n devzero
      
      - name: Deploy Data Plane Dependencies
        run: |
          cd self-hosted/charts/dz-data-plane-deps
          find values -type f -exec sed -i'.bak' "s/example\.com/$JOB_IDENTIFIER\.ci\.selfzero\.net/g" {} \; && find values -name "*.bak" -delete
          make install

      - name: Deploy DevZero Data Plane
        run: |
          cd self-hosted/charts/dz-data-plane
          find . -name "values.yaml" -exec sed -i'.bak' "s/example\.com/$JOB_IDENTIFIER\.ci\.selfzero\.net/g" {} \; && find . -name "values.yaml.bak" -delete
          make install
          kubectl delete runtimeclass kata
          kubectl apply -f self-hosted/terraform/examples/gcp/base-cluster/runtimeclass.yaml

      - name: Validate Data Plane
        run: |
          kubectl get pods -n devzero-self-hosted
          kubectl get ingress -n devzero-self-hosted
      
      - name: '[helm] Destroy data-plane'
        if: always()
        run: |
          cd self-hosted/charts/dz-data-plane
          make delete
      
      - name: '[helm] Destroy data-plane-deps'
        if: always()
        run: |
          cd self-hosted/charts/dz-data-plane-deps
          make delete

      - name: '[helm] Destroy control-plane'
        if: always()
        run: |
          cd self-hosted/charts/dz-control-plane
          make delete
      
      - name: '[helm] Destroy control-plane-deps'
        if: always()
        run: |
          cd self-hosted/charts/dz-control-plane-deps
          make delete
    
      - name: '[terraform] Destroy base-cluster'
        if: always()
        run: |
          cd self-hosted/terraform/examples/gcp/base-cluster
          terraform destroy -auto-approve


