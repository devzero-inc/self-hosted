name: devzero DSH deployment

on:
  push:
    branches:
      - garvit/pipeline-testing
  workflow_dispatch:

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::484907513542:role/github-actions-oidc-role
          aws-region: us-west-1

      - name: Clone DevZero Self-Hosted Repository
        env:
          GH_PAT: ${{ secrets.GH_TOKEN }}
        run: |
          git clone https://$GH_PAT@github.com/devzero-inc/self-hosted.git -b garvit/pipeline-testing

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Initialize and Apply Terraform (Infrastructure)
        run: |
          cd self-hosted/terraform/examples/aws/base-cluster
          terraform init
          terraform apply -auto-approve
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
          echo "PUBLIC_SUBNET_IDS=$(terraform output -json public_subnet_ids | jq -c .)" >> $GITHUB_ENV
          echo "PRIVATE_SUBNET_IDS=$(terraform output -json private_subnet_ids | jq -c .)" >> $GITHUB_ENV

      - name: Update Cluster-Extensions tfvars
        run: |
          cat <<EOT > self-hosted/terraform/examples/aws/cluster-extensions/terraform.tfvars
          region = "us-west-1"
          vpc_id = "$VPC_ID"
          public_subnet_ids = $PUBLIC_SUBNET_IDS
          private_subnet_ids = $PRIVATE_SUBNET_IDS
          enable_cluster_autoscaler = false
          cluster_name = "$CLUSTER_NAME"
          EOT

      - name: Initialize and Apply Cluster-Extensions
        run: |
          cd self-hosted/terraform/examples/aws/cluster-extensions
          terraform init
          terraform apply -auto-approve

      - name: Configure Kubernetes Access
        run: |
          aws eks update-kubeconfig --region us-west-1 --name $CLUSTER_NAME

      - name: Deploy Control Plane Dependencies
        run: |
          cd self-hosted/charts/dz-control-plane-deps
          make install

      - name: Install yq
        run: |
          sudo apt-get update && sudo apt-get install -y yq

      - name: Update values.yaml for Data Plane
        run: |
          yq e -i -y '.credentials.username = strenv(DOCKERHUB_USERNAME)' self-hosted/charts/dz-control-plane/values.yaml
          yq e -i -y '.credentials.password = strenv(DOCKERHUB_TOKEN)' self-hosted/charts/dz-control-plane/values.yaml
          yq e -i -y '.credentials.email = "garvit@devzero.io"' self-hosted/charts/dz-control-plane/values.yaml
          yq e -i -y '.backend.licenseKey = strenv(BACKEND_LICENSE_KEY)' self-hosted/charts/dz-control-plane/values.yaml

      - name: Deploy DevZero Control Plane
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          cd self-hosted/charts/dz-control-plane
          make add-docker-creds
          make install

      - name: Validate Control Plane
        run: |
          kubectl get pods -n devzero
          kubectl get ingress -n devzero

      - name: Update values.yaml for Data Plane
        run: |
          cat <<EOT > self-hosted/charts/dz-control-plane/values.yaml
          ## @section Devzero
          devzero:
            teamId: ""
            region: "us-west-1"
            vault:
              server: "https://csi.devzero.io"
          ## @section Node Labeler
          nodeLabeler:
            enabled: true
          ## @section Credentials Configuration
          credentials:
            registry: "docker.io"
            username: "${{ secrets.DOCKERHUB_USERNAME }}"
            password: "${{ secrets.DOCKERHUB_TOKEN }}"
            email: "garvit@devzero.io"
          EOT

      - name: Deploy Data Plane Dependencies
        run: |
          cd self-hosted/charts/dz-data-plane-deps
          make install

      - name: Deploy DevZero Data Plane
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          cd self-hosted/charts/dz-control-plane
          make install

      - name: Validate Data Plane
        run: |
          kubectl get pods -n devzero-self-hosted
          kubectl get ingress -n devzero-self-hosted

      # - name: Run Destroy cluster-extensions
      #   if: always()
      #   run: |
      #     cd self-hosted/terraform/examples/aws/cluster-extensions
      #     terraform destroy -auto-approve

      # - name: Destroy AWS Dependencies
      #   if: always()
      #   run: |
      #     aws ec2 delete-internet-gateway --internet-gateway-id $(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query 'InternetGateways[0].InternetGatewayId' --output text) || true
      #     aws ec2 delete-nat-gateway --nat-gateway-id $(aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$VPC_ID" --query 'NatGateways[0].NatGatewayId' --output text) || true
      #     aws ec2 delete-route-table --route-table-id $(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text) || true
      #     for subnet in $(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[*].SubnetId' --output text); do
      #       aws ec2 delete-subnet --subnet-id $subnet || true
      #     done
      #     for sg in $(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text); do
      #       aws ec2 delete-security-group --group-id $sg || true
      #     done

      # - name: Run Destroy base-cluster
      #   if: always()
      #   run: |
      #     cd self-hosted/terraform/examples/aws/base-cluster
      #     terraform destroy -auto-approve
